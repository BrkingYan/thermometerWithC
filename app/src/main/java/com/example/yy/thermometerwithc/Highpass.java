package com.example.yy.thermometerwithc;

/**
 * Created by Su Liu on 2018/2/1.
 * 一个高通滤波器，高于10000hz的信号可以通过
 */

public class Highpass {
    //Coefficient for 8k
    private static double[] b ={-0.00209136776089846,0.00828146717751014,
            -0.0109322705109934,0.00187598170001231,0.00618560583279490,0.000479762679398772,
            -0.00512789498359132,-0.00345976499379551,0.00325619139516059,0.00612223988363055,
            0.000455508413768302,-0.00699963153124367,-0.00552859363560385,0.00456940408975042,
            0.0100587827459417,0.00166201691425807,-0.0111662980216761,-0.0102052418229019,
            0.00632557870119329,0.0173269202712793,0.00495084451287561,-0.0180175173720173,
            -0.0197642700887930,0.00802150504085179,0.0316263219203550,0.0138945104803868,
            -0.0315988754213121,-0.0444765102115353,0.00923343318421721,0.0764137556566493,
            0.0536619290511573,-0.100638909338721,-0.299193878339929,0.609665769623719,
            -0.299193878339929,-0.100638909338721,0.0536619290511573,0.0764137556566493,
            0.00923343318421721,-0.0444765102115353,-0.0315988754213121,0.0138945104803868,
            0.0316263219203550,0.00802150504085179,-0.0197642700887930,-0.0180175173720173,
            0.00495084451287561,0.0173269202712793,0.00632557870119329,-0.0102052418229019,
            -0.0111662980216761,0.00166201691425807,0.0100587827459417,0.00456940408975042,
            -0.00552859363560385,-0.00699963153124367,0.000455508413768302,0.00612223988363055,
            0.00325619139516059,-0.00345976499379551,-0.00512789498359132,0.000479762679398772,
            0.00618560583279490,0.00187598170001231,-0.0109322705109934,0.00828146717751014,
            -0.00209136776089846};
    //Coefficient for 2k
    private static double [] b1 = {
            -0.05853948702347337, 0.098757610846725713,
         0.052693582506716033,
         0.032517531817561458,
         0.02347921895832851,
         0.018882266295241496,
         0.015967506819496935,
         0.013136461124842361,
         0.010121868695073864,
         0.006462249349398934,
         0.0021304846769515788,
         -0.0026935672116587539,
         -0.0081453992474944982,
         -0.014060468640693028,
         -0.02027960595773105,
         -0.026689790155029487,
         -0.033170083859105255,
         -0.039565417716583437,
         -0.04561244163041539,
         -0.051208996890332995,
         -0.056264835820790164,
         -0.060614452694794201,
         -0.064135296329100089,
         -0.066698950084762842,
         -0.06824551178845345,
         0.93123378697296399,
         -0.06824551178845345,
         -0.066698950084762842,
         -0.064135296329100089,
         -0.060614452694794201,
         -0.056264835820790164,
         -0.051208996890332995,
         -0.04561244163041539,
         -0.039565417716583437,
         -0.033170083859105255,
         -0.026689790155029487,
         -0.02027960595773105,
         -0.014060468640693028,
         -0.0081453992474944982,
         -0.0026935672116587539,
         0.0021304846769515788,
         0.006462249349398934,
         0.010121868695073864,
         0.013136461124842361,
         0.015967506819496935,
         0.018882266295241496,
         0.02347921895832851,
         0.032517531817561458,
         0.052693582506716033,
         0.098757610846725713,
         -0.05853948702347337
};
    private static double[] in;
    private static double[] outData;



    public double[] FIRFilter (short[] signal) {
        in=new double[b.length];

        outData=new double[signal.length];
        for (int i = 0; i < signal.length; i++) {

            System.arraycopy(in, 0, in, 1, in.length - 1);  //in[1]=in[0],in[2]=in[1]...
            in[0] = signal[i];

            //calculate y based on a and b coefficients
            //and in and out.
            double y = 0;
            for(int j = 0 ; j < b.length ; j++){
                y += b[j] * in[j];

            }
            outData[i] = y;
        }
        return outData;
    }

    public double[] FIRFilter2KStopBandWithJni(short[] signal){
        in = new double[b1.length];
        outData = new double[signal.length];
        return Algorithm.firHelperJni(in,outData,signal);
    }



    public double[] FIRFilter2KStopBand (short[] signal) {
        in = new double[b1.length];//51
        outData = new double[signal.length];//480

        for (int i = 0; i < signal.length; i++) {
            System.arraycopy(in, 0, in, 1, in.length - 1);  //in[1]=in[0],in[2]=in[1]...
            in[0] = signal[i];

            //calculate y based on a and b coefficients
            //and in and out.
            double y = 0;
            for(int j = 0 ; j < b1.length ; j++){
                y += b1[j] * in[j];
            }
            outData[i] = y;
        }
        return outData;
    }
}